services:
  web:
    build:
      context: .
      # dockerfile: Dockerfile
    working_dir: /upwards.crm.backend/app
    container_name: upwards
    env_file:
      - .env
    environment:
      - PYTHONPATH=/upwards.crm.backend/app
      - DJANGO_SETTINGS_MODULE=config.settings
    command: >
      sh -c "PYTHONPATH=/upwards.crm.backend/app gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    # command: gunicorn config.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/upwards.crm.backend
      - static_volume:/upwards.crm.backend/app/static
      - media_volume:/upwards.crm.backend/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  db:
    image: postgres:17
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - static_volume:/upwards.crm.backend/app/static
      - media_volume:/upwards.crm.backend/app/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume: